public final class io/github/airflux/commons/types/IdentityKt {
	public static final fun identity (Ljava/lang/Object;)Ljava/lang/Object;
}

public final class io/github/airflux/commons/types/NonFatalKt {
	public static final fun isFatal (Ljava/lang/Throwable;)Z
}

public abstract interface class io/github/airflux/commons/types/Raise {
	public abstract fun raise (Ljava/lang/Object;)Ljava/lang/Void;
}

public final class io/github/airflux/commons/types/RaiseException : java/util/concurrent/CancellationException {
	public fun <init> (Ljava/lang/Object;Lio/github/airflux/commons/types/Raise;)V
	public final fun getFailure ()Ljava/lang/Object;
	public final fun getRaise ()Lio/github/airflux/commons/types/Raise;
}

public final class io/github/airflux/commons/types/RaiseKt {
	public static final fun defaultRaise (Lio/github/airflux/commons/types/Raise;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
	public static final fun ensure (Lio/github/airflux/commons/types/Raise;ZLkotlin/jvm/functions/Function0;)V
	public static final fun ensureNotNull (Lio/github/airflux/commons/types/Raise;Ljava/lang/Object;Lkotlin/jvm/functions/Function0;)Ljava/lang/Object;
	public static final fun failureOrRethrow (Ljava/lang/Exception;Lio/github/airflux/commons/types/Raise;)Ljava/lang/Object;
}

public abstract interface class io/github/airflux/commons/types/either/Either {
	public static final field Companion Lio/github/airflux/commons/types/either/Either$Companion;
}

public final class io/github/airflux/commons/types/either/Either$Companion {
	public final fun left (Ljava/lang/Object;)Lio/github/airflux/commons/types/either/Either$Left;
	public final fun right (Ljava/lang/Object;)Lio/github/airflux/commons/types/either/Either$Right;
}

public final class io/github/airflux/commons/types/either/Either$Left : io/github/airflux/commons/types/either/Either {
	public static final field Companion Lio/github/airflux/commons/types/either/Either$Left$Companion;
	public fun <init> (Ljava/lang/Object;)V
	public final fun component1 ()Ljava/lang/Object;
	public final fun copy (Ljava/lang/Object;)Lio/github/airflux/commons/types/either/Either$Left;
	public static synthetic fun copy$default (Lio/github/airflux/commons/types/either/Either$Left;Ljava/lang/Object;ILjava/lang/Object;)Lio/github/airflux/commons/types/either/Either$Left;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getValue ()Ljava/lang/Object;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/github/airflux/commons/types/either/Either$Left$Companion {
	public final fun getAsEmptyList ()Lio/github/airflux/commons/types/either/Either$Left;
	public final fun getAsFalse ()Lio/github/airflux/commons/types/either/Either$Left;
	public final fun getAsNull ()Lio/github/airflux/commons/types/either/Either$Left;
	public final fun getAsTrue ()Lio/github/airflux/commons/types/either/Either$Left;
	public final fun getAsUnit ()Lio/github/airflux/commons/types/either/Either$Left;
	public final fun of (Z)Lio/github/airflux/commons/types/either/Either$Left;
}

public final class io/github/airflux/commons/types/either/Either$Right : io/github/airflux/commons/types/either/Either {
	public static final field Companion Lio/github/airflux/commons/types/either/Either$Right$Companion;
	public fun <init> (Ljava/lang/Object;)V
	public final fun component1 ()Ljava/lang/Object;
	public final fun copy (Ljava/lang/Object;)Lio/github/airflux/commons/types/either/Either$Right;
	public static synthetic fun copy$default (Lio/github/airflux/commons/types/either/Either$Right;Ljava/lang/Object;ILjava/lang/Object;)Lio/github/airflux/commons/types/either/Either$Right;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getValue ()Ljava/lang/Object;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/github/airflux/commons/types/either/Either$Right$Companion {
	public final fun getAsEmptyList ()Lio/github/airflux/commons/types/either/Either$Right;
	public final fun getAsFalse ()Lio/github/airflux/commons/types/either/Either$Right;
	public final fun getAsNull ()Lio/github/airflux/commons/types/either/Either$Right;
	public final fun getAsTrue ()Lio/github/airflux/commons/types/either/Either$Right;
	public final fun getAsUnit ()Lio/github/airflux/commons/types/either/Either$Right;
	public final fun of (Z)Lio/github/airflux/commons/types/either/Either$Right;
}

public final class io/github/airflux/commons/types/either/EitherKt {
	public static final fun asLeft (Ljava/lang/Object;)Lio/github/airflux/commons/types/either/Either$Left;
	public static final fun asRight (Ljava/lang/Object;)Lio/github/airflux/commons/types/either/Either$Right;
	public static final fun flatMapLeft (Lio/github/airflux/commons/types/either/Either;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/commons/types/either/Either;
	public static final fun flatMapRight (Lio/github/airflux/commons/types/either/Either;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/commons/types/either/Either;
	public static final fun fold (Lio/github/airflux/commons/types/either/Either;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
	public static final fun getLeftOrElse (Lio/github/airflux/commons/types/either/Either;Ljava/lang/Object;)Ljava/lang/Object;
	public static final fun getLeftOrElse (Lio/github/airflux/commons/types/either/Either;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
	public static final fun getLeftOrNull (Lio/github/airflux/commons/types/either/Either;)Ljava/lang/Object;
	public static final fun getRightOrElse (Lio/github/airflux/commons/types/either/Either;Ljava/lang/Object;)Ljava/lang/Object;
	public static final fun getRightOrElse (Lio/github/airflux/commons/types/either/Either;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
	public static final fun getRightOrNull (Lio/github/airflux/commons/types/either/Either;)Ljava/lang/Object;
	public static final fun isLeft (Lio/github/airflux/commons/types/either/Either;)Z
	public static final fun isLeft (Lio/github/airflux/commons/types/either/Either;Lkotlin/jvm/functions/Function1;)Z
	public static final fun isRight (Lio/github/airflux/commons/types/either/Either;)Z
	public static final fun isRight (Lio/github/airflux/commons/types/either/Either;Lkotlin/jvm/functions/Function1;)Z
	public static final fun left (Ljava/lang/Object;)Lio/github/airflux/commons/types/either/Either$Left;
	public static final fun leftOrElse (Lio/github/airflux/commons/types/either/Either;Lkotlin/jvm/functions/Function0;)Lio/github/airflux/commons/types/either/Either;
	public static final fun leftOrThrow (Lio/github/airflux/commons/types/either/Either;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
	public static final fun mapLeft (Lio/github/airflux/commons/types/either/Either;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/commons/types/either/Either;
	public static final fun mapRight (Lio/github/airflux/commons/types/either/Either;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/commons/types/either/Either;
	public static final fun merge (Lio/github/airflux/commons/types/either/Either;)Ljava/lang/Object;
	public static final fun onLeft (Lio/github/airflux/commons/types/either/Either;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/commons/types/either/Either;
	public static final fun onRight (Lio/github/airflux/commons/types/either/Either;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/commons/types/either/Either;
	public static final fun right (Ljava/lang/Object;)Lio/github/airflux/commons/types/either/Either$Right;
	public static final fun rightOrElse (Lio/github/airflux/commons/types/either/Either;Lkotlin/jvm/functions/Function0;)Lio/github/airflux/commons/types/either/Either;
	public static final fun rightOrThrow (Lio/github/airflux/commons/types/either/Either;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
}

public abstract interface class io/github/airflux/commons/types/fail/Fail {
	public static final field Companion Lio/github/airflux/commons/types/fail/Fail$Companion;
}

public final class io/github/airflux/commons/types/fail/Fail$Companion {
	public final fun error (Ljava/lang/Object;)Lio/github/airflux/commons/types/fail/Fail$Error;
	public final fun exception (Ljava/lang/Object;)Lio/github/airflux/commons/types/fail/Fail$Exception;
}

public final class io/github/airflux/commons/types/fail/Fail$Error : io/github/airflux/commons/types/fail/Fail {
	public fun <init> (Ljava/lang/Object;)V
	public final fun component1 ()Ljava/lang/Object;
	public final fun copy (Ljava/lang/Object;)Lio/github/airflux/commons/types/fail/Fail$Error;
	public static synthetic fun copy$default (Lio/github/airflux/commons/types/fail/Fail$Error;Ljava/lang/Object;ILjava/lang/Object;)Lio/github/airflux/commons/types/fail/Fail$Error;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getValue ()Ljava/lang/Object;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/github/airflux/commons/types/fail/Fail$Exception : io/github/airflux/commons/types/fail/Fail {
	public fun <init> (Ljava/lang/Object;)V
	public final fun component1 ()Ljava/lang/Object;
	public final fun copy (Ljava/lang/Object;)Lio/github/airflux/commons/types/fail/Fail$Exception;
	public static synthetic fun copy$default (Lio/github/airflux/commons/types/fail/Fail$Exception;Ljava/lang/Object;ILjava/lang/Object;)Lio/github/airflux/commons/types/fail/Fail$Exception;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getValue ()Ljava/lang/Object;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/github/airflux/commons/types/fail/FailKt {
	public static final fun asError (Ljava/lang/Object;)Lio/github/airflux/commons/types/fail/Fail$Error;
	public static final fun asException (Ljava/lang/Object;)Lio/github/airflux/commons/types/fail/Fail$Exception;
	public static final fun error (Ljava/lang/Object;)Lio/github/airflux/commons/types/fail/Fail$Error;
	public static final fun errorOrElse (Lio/github/airflux/commons/types/fail/Fail;Lkotlin/jvm/functions/Function0;)Lio/github/airflux/commons/types/fail/Fail;
	public static final fun errorOrThrow (Lio/github/airflux/commons/types/fail/Fail;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
	public static final fun exception (Ljava/lang/Object;)Lio/github/airflux/commons/types/fail/Fail$Exception;
	public static final fun exceptionOrElse (Lio/github/airflux/commons/types/fail/Fail;Lkotlin/jvm/functions/Function0;)Lio/github/airflux/commons/types/fail/Fail;
	public static final fun exceptionOrThrow (Lio/github/airflux/commons/types/fail/Fail;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
	public static final fun flatMapError (Lio/github/airflux/commons/types/fail/Fail;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/commons/types/fail/Fail;
	public static final fun flatMapException (Lio/github/airflux/commons/types/fail/Fail;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/commons/types/fail/Fail;
	public static final fun fold (Lio/github/airflux/commons/types/fail/Fail;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
	public static final fun getErrorOrElse (Lio/github/airflux/commons/types/fail/Fail;Ljava/lang/Object;)Ljava/lang/Object;
	public static final fun getErrorOrElse (Lio/github/airflux/commons/types/fail/Fail;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
	public static final fun getErrorOrNull (Lio/github/airflux/commons/types/fail/Fail;)Ljava/lang/Object;
	public static final fun getExceptionOrElse (Lio/github/airflux/commons/types/fail/Fail;Ljava/lang/Object;)Ljava/lang/Object;
	public static final fun getExceptionOrElse (Lio/github/airflux/commons/types/fail/Fail;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
	public static final fun getExceptionOrNull (Lio/github/airflux/commons/types/fail/Fail;)Ljava/lang/Object;
	public static final fun isError (Lio/github/airflux/commons/types/fail/Fail;)Z
	public static final fun isError (Lio/github/airflux/commons/types/fail/Fail;Lkotlin/jvm/functions/Function1;)Z
	public static final fun isException (Lio/github/airflux/commons/types/fail/Fail;)Z
	public static final fun isException (Lio/github/airflux/commons/types/fail/Fail;Lkotlin/jvm/functions/Function1;)Z
	public static final fun mapError (Lio/github/airflux/commons/types/fail/Fail;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/commons/types/fail/Fail;
	public static final fun mapException (Lio/github/airflux/commons/types/fail/Fail;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/commons/types/fail/Fail;
	public static final fun merge (Lio/github/airflux/commons/types/fail/Fail;)Ljava/lang/Object;
	public static final fun onError (Lio/github/airflux/commons/types/fail/Fail;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/commons/types/fail/Fail;
	public static final fun onException (Lio/github/airflux/commons/types/fail/Fail;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/commons/types/fail/Fail;
}

public abstract interface class io/github/airflux/commons/types/resultk/ResultK {
	public static final field Companion Lio/github/airflux/commons/types/resultk/ResultK$Companion;
}

public final class io/github/airflux/commons/types/resultk/ResultK$Companion {
	public final fun failure (Ljava/lang/Object;)Lio/github/airflux/commons/types/resultk/ResultK$Failure;
	public final fun success (Ljava/lang/Object;)Lio/github/airflux/commons/types/resultk/ResultK$Success;
}

public final class io/github/airflux/commons/types/resultk/ResultK$Failure : io/github/airflux/commons/types/resultk/ResultK {
	public fun <init> (Ljava/lang/Object;)V
	public final fun component1 ()Ljava/lang/Object;
	public final fun copy (Ljava/lang/Object;)Lio/github/airflux/commons/types/resultk/ResultK$Failure;
	public static synthetic fun copy$default (Lio/github/airflux/commons/types/resultk/ResultK$Failure;Ljava/lang/Object;ILjava/lang/Object;)Lio/github/airflux/commons/types/resultk/ResultK$Failure;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getCause ()Ljava/lang/Object;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/github/airflux/commons/types/resultk/ResultK$Raise : io/github/airflux/commons/types/Raise {
	public fun <init> ()V
	public final fun bind (Lio/github/airflux/commons/types/resultk/ResultK;)Ljava/lang/Object;
	public final fun component1 (Lio/github/airflux/commons/types/resultk/ResultK;)Ljava/lang/Object;
	public final fun raise (Lio/github/airflux/commons/types/resultk/ResultK;)V
	public fun raise (Ljava/lang/Object;)Ljava/lang/Void;
}

public final class io/github/airflux/commons/types/resultk/ResultK$Success : io/github/airflux/commons/types/resultk/ResultK {
	public static final field Companion Lio/github/airflux/commons/types/resultk/ResultK$Success$Companion;
	public fun <init> (Ljava/lang/Object;)V
	public final fun component1 ()Ljava/lang/Object;
	public final fun copy (Ljava/lang/Object;)Lio/github/airflux/commons/types/resultk/ResultK$Success;
	public static synthetic fun copy$default (Lio/github/airflux/commons/types/resultk/ResultK$Success;Ljava/lang/Object;ILjava/lang/Object;)Lio/github/airflux/commons/types/resultk/ResultK$Success;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getValue ()Ljava/lang/Object;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/github/airflux/commons/types/resultk/ResultK$Success$Companion {
	public final fun getAsEmptyList ()Lio/github/airflux/commons/types/resultk/ResultK$Success;
	public final fun getAsFalse ()Lio/github/airflux/commons/types/resultk/ResultK$Success;
	public final fun getAsNull ()Lio/github/airflux/commons/types/resultk/ResultK$Success;
	public final fun getAsTrue ()Lio/github/airflux/commons/types/resultk/ResultK$Success;
	public final fun getAsUnit ()Lio/github/airflux/commons/types/resultk/ResultK$Success;
	public final fun of (Z)Lio/github/airflux/commons/types/resultk/ResultK$Success;
}

public final class io/github/airflux/commons/types/resultk/ResultKDSLKt {
	public static final fun result (Lkotlin/jvm/functions/Function1;)Lio/github/airflux/commons/types/resultk/ResultK;
	public static final fun resultWith (Lkotlin/jvm/functions/Function1;)Lio/github/airflux/commons/types/resultk/ResultK;
}

public final class io/github/airflux/commons/types/resultk/ResultKKt {
	public static final fun andThen (Lio/github/airflux/commons/types/resultk/ResultK;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/commons/types/resultk/ResultK;
	public static final fun apply (Lio/github/airflux/commons/types/resultk/ResultK;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/commons/types/resultk/ResultK;
	public static final fun asFailure (Ljava/lang/Object;)Lio/github/airflux/commons/types/resultk/ResultK$Failure;
	public static final fun asSuccess (Ljava/lang/Object;)Lio/github/airflux/commons/types/resultk/ResultK$Success;
	public static final fun failure (Ljava/lang/Object;)Lio/github/airflux/commons/types/resultk/ResultK$Failure;
	public static final fun filterNotNull (Lio/github/airflux/commons/types/resultk/ResultK;Lkotlin/jvm/functions/Function0;)Lio/github/airflux/commons/types/resultk/ResultK;
	public static final fun filterOrElse (Lio/github/airflux/commons/types/resultk/ResultK;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function0;)Lio/github/airflux/commons/types/resultk/ResultK;
	public static final fun flatMap (Lio/github/airflux/commons/types/resultk/ResultK;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/commons/types/resultk/ResultK;
	public static final fun flatMapBoolean (Lio/github/airflux/commons/types/resultk/ResultK;Lkotlin/jvm/functions/Function0;Lkotlin/jvm/functions/Function0;)Lio/github/airflux/commons/types/resultk/ResultK;
	public static final fun fold (Lio/github/airflux/commons/types/resultk/ResultK;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
	public static final fun forEach (Lio/github/airflux/commons/types/resultk/ResultK;Lkotlin/jvm/functions/Function1;)V
	public static final fun getFailureOrNull (Lio/github/airflux/commons/types/resultk/ResultK;)Ljava/lang/Object;
	public static final fun getOrElse (Lio/github/airflux/commons/types/resultk/ResultK;Ljava/lang/Object;)Ljava/lang/Object;
	public static final fun getOrElse (Lio/github/airflux/commons/types/resultk/ResultK;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
	public static final fun getOrForward (Lio/github/airflux/commons/types/resultk/ResultK;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
	public static final fun getOrNull (Lio/github/airflux/commons/types/resultk/ResultK;)Ljava/lang/Object;
	public static final fun isFailure (Lio/github/airflux/commons/types/resultk/ResultK;)Z
	public static final fun isFailure (Lio/github/airflux/commons/types/resultk/ResultK;Lkotlin/jvm/functions/Function1;)Z
	public static final fun isSuccess (Lio/github/airflux/commons/types/resultk/ResultK;)Z
	public static final fun isSuccess (Lio/github/airflux/commons/types/resultk/ResultK;Lkotlin/jvm/functions/Function1;)Z
	public static final fun map (Lio/github/airflux/commons/types/resultk/ResultK;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/commons/types/resultk/ResultK;
	public static final fun mapFailure (Lio/github/airflux/commons/types/resultk/ResultK;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/commons/types/resultk/ResultK;
	public static final fun merge (Lio/github/airflux/commons/types/resultk/ResultK;)Ljava/lang/Object;
	public static final fun onFailure (Lio/github/airflux/commons/types/resultk/ResultK;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/commons/types/resultk/ResultK;
	public static final fun onSuccess (Lio/github/airflux/commons/types/resultk/ResultK;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/commons/types/resultk/ResultK;
	public static final fun orElse (Lio/github/airflux/commons/types/resultk/ResultK;Lkotlin/jvm/functions/Function0;)Lio/github/airflux/commons/types/resultk/ResultK;
	public static final fun orThrow (Lio/github/airflux/commons/types/resultk/ResultK;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
	public static final fun recover (Lio/github/airflux/commons/types/resultk/ResultK;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/commons/types/resultk/ResultK;
	public static final fun recoverWith (Lio/github/airflux/commons/types/resultk/ResultK;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/commons/types/resultk/ResultK;
	public static final fun sequence (Ljava/lang/Iterable;)Lio/github/airflux/commons/types/resultk/ResultK;
	public static final fun success (Ljava/lang/Object;)Lio/github/airflux/commons/types/resultk/ResultK$Success;
	public static final fun traverse (Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/commons/types/resultk/ResultK;
	public static final fun traverseTo (Ljava/lang/Iterable;Ljava/util/List;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/commons/types/resultk/ResultK;
	public static final fun traverseTo (Ljava/lang/Iterable;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/commons/types/resultk/ResultK;
	public static final fun traverseTo (Ljava/lang/Iterable;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/commons/types/resultk/ResultK;
	public static final fun traverseTo (Ljava/lang/Iterable;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Lio/github/airflux/commons/types/resultk/ResultK;
}

